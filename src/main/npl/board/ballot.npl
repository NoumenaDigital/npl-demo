package board

protocol[chairman, board_member] Ballot(
    var topic: Text,
    var board_size: Number
) {
    require(board_size > 0, "Board size should be bigger than zero");

    initial state VOTING;
    state COUNTING;
    final state COUNTED;

    var votes: List<Vote> = listOf<Vote>();
    var quorum: Number = 0.60; // 60% of the board size must vote to end the vote

    // Yay and Nay votes are counted in the COUNTING state
    var yay_count: Optional<Number> = optionalOf<Number>();
    var nay_count: Optional<Number> = optionalOf<Number>();

    var accepted: Optional<Boolean> = optionalOf<Boolean>();

    permission[*voter] vote(board_member_vote: Vote) | VOTING {
        require(
            voter.mayRepresent(board_member),
            "Only board members can vote");
        require(
            this.votes.noneMatch(function(vote_i: Vote) returns Boolean -> vote_i.isVotingParty[voter]()),
            "Board member cannot vote twice");

        require(
            this.votes.filter(function(vote_i: Vote) returns Boolean -> vote_i.isVotingParty[voter]()).isEmpty(),
            "Keeps only votes that are form the voting party and making sure the list is empty");

        require(
            board_member_vote.isVotingParty[voter](),
            "Voter should be the person that submits the votes");

        this.votes = this.votes.with(board_member_vote);

        if (votes.size() == this.board_size) { // everyone has voted
            become COUNTING;
        };
    };

    permission[*random] endVote() | VOTING {
        require(random.mayRepresent(chairman), "Only Chairman can end vote");
        require(this.votes.size() > quorum * board_size, "Cannot end vote before the quorum is reach");

        become COUNTING;
    };

    permission[chairman] triggerCounting() | COUNTING {
        this.yay_count = optionalOf(
            this.votes.filter(
                function(vote_i: Vote) -> vote_i.member_decision == VotePossibilities.YAY
            ).size());
        this.nay_count = optionalOf(
            this.votes.filter(
                function(vote_i: Vote) -> vote_i.member_decision == VotePossibilities.NAY
            ).size());

        if (this.yay_count.isPresent() && this.nay_count.isPresent()) {
            this.accepted = optionalOf(this.yay_count.getOrFail() > this.nay_count.getOrFail());
        };

        become COUNTED;
    };

    permission[chairman | board_member] changeNothing() {
        this.topic = this.topic;
        this.topic = this.topic;
    };
};
