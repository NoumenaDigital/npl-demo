package board

/*
 * Describes a notification for receipient outside of the current NPL scope.
 * Notifications also contain the protocol state (platform name, as seen in
 * the sandbox pretty-viewer).
 */
notification helloWorld(vote: Vote) returns Text;

protocol[chairman, board_member] Ballot(
    var topic: Text,
    var board_size: Number
) {
    guard(board_size > 0, "Board size should be bigger than zero");

    initial state VOTING;
    state COUNTING;
    final state COUNTED;

    var votes: List<Vote> = listOf<Vote>(); // TODO make sure no one votes twice

    // Yay and Nay votes are counted in the COUNTING state
    var yay_count: Option<Number> = optionOf<Number>();
    var nay_count: Option<Number> = optionOf<Number>();

    var accepted: Option<Boolean> = optionOf<Boolean>();

    permission[*anyone] helloWorldCallback(message: NotifyResult<Text>) returns Unit {
        /* can execute some code when the notification receipient sends an answer back */
    };

    permission[*voter] vote(board_member_vote: Vote) | VOTING {
        guard(voter.mayRepresent(board_member), "Only board members can vote");
        guard(
            this.votes.noneMatch(\(vote_i: Vote) returns Boolean -> vote_i.isVotingParty[voter]()),
            "Board member cannot vote twice");

        guard(
            this.votes.filter(\(vote_i: Vote) returns Boolean -> vote_i.isVotingParty[voter]()).isEmpty(),
            "Keeps only votes that are form the voting party and making sure the list is empty");

        this.votes = this.votes.with(board_member_vote);

        /* triggers the notification outflow */
        notify helloWorld(board_member_vote) resume helloWorldCallback;

        if (votes.size() == this.board_size) { // everyone has voted
            become COUNTING;
        };
    };

    permission[*random] endVote() | VOTING {
        guard(random.mayRepresent(chairman), "Only Chairman can end vote");
        guard(this.votes.size() > 0.6 * board_size, "Cannot end vote before the quorum is reach");

        become COUNTING;
    };

    permission[chairman] triggerCounting() | COUNTING {
        this.yay_count = optionOf(
            this.votes.filter(
                \(vote_i: Vote) -> vote_i.member_decision == VotePossibilities.YAY
            ).size());
        this.nay_count = optionOf(
            this.votes.filter(
                \(vote_i: Vote) -> vote_i.member_decision == VotePossibilities.NAY
            ).size());

        if (this.yay_count.isPresent() && this.nay_count.isPresent()) {
            this.accepted = optionOf(this.yay_count.getOrFail() > this.nay_count.getOrFail());
        };

        become COUNTED;
    };

    permission[chairman | board_member] changeNothing() {
        this.topic = this.topic;
        this.topic = this.topic;
    };
};
