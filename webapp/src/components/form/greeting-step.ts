import { html, render } from "lit-html";

export class GreetingStep extends HTMLElement {
    private startButtonHandler: ((event: Event) => void) | null = null;

    connectedCallback() {
        this.render();
        this.setupEventListeners();
    }

    disconnectedCallback() {
        this.removeEventListeners();
    }

    private render() {
        render(this.template(), this);
    }

    private template() {
        return html`
            <div class="step-content">
                <h1>Hello World Protocol Demo</h1>
                <div>
                    <p><b>Build a complete backend API with just 20 lines of code.</b></p>
                    <p><b>No boilerplate. No complex setup. No infrastructure headaches.</b></p>
                    <p><b>Focus on your business logic â€” let NOUMENA handle the rest.</b></p>
                    <p><b>With this demo, you'll see how NOUMENA delivers:</b></p>
                    <ul class="feature-list">
                        <li>Fine-grained & contextual access control and built-in security</li>
                        <li>Automatic persistence, transaction integrity, and error handling</li>
                        <li>Autogenerated REST API, OpenAPI spec, and a production-ready backend</li>
                    </ul>
                    <p>In the demo, discover how NOUMENA helps you build faster, safer, and smarter.</p>
                </div>
                <div class="input-container">
                    <button id="startDemoButton">Start Demo</button>
                </div>
            </div>
        `;
    }

    private setupEventListeners() {
        this.removeEventListeners();

        const startButton = this.querySelector('#startDemoButton');
        if (startButton) {
            this.startButtonHandler = this.handleStartClick.bind(this);
            startButton.addEventListener('click', this.startButtonHandler);
        }
    }

    private removeEventListeners() {
        const startButton = this.querySelector('#startDemoButton');
        if (startButton && this.startButtonHandler) {
            startButton.removeEventListener('click', this.startButtonHandler);
            this.startButtonHandler = null;
        }
    }

    private handleStartClick() {
        this.dispatchEvent(new CustomEvent('next-step', {
            bubbles: true,
            composed: true
        }));
    }
}

customElements.define('greeting-step', GreetingStep);

declare global {
    interface HTMLElementTagNameMap {
        'greeting-step': GreetingStep;
    }
}
